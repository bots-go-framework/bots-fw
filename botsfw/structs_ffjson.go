// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: structs.go
// DO NOT EDIT!

package bots

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"github.com/strongo/bots-api-fbm"
)

// MarshalJSON marshal bytes to json - template
func (j *BaseHandler) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *BaseHandler) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"WebhookDriver":`)
	/* Interface types must use runtime reflection. type=bots.WebhookDriver kind=interface */
	err = buf.Encode(j.WebhookDriver)
	if err != nil {
		return err
	}
	buf.WriteString(`,"BotHost":`)
	/* Interface types must use runtime reflection. type=bots.BotHost kind=interface */
	err = buf.Encode(j.BotHost)
	if err != nil {
		return err
	}
	buf.WriteString(`,"BotPlatform":`)
	/* Interface types must use runtime reflection. type=bots.BotPlatform kind=interface */
	err = buf.Encode(j.BotPlatform)
	if err != nil {
		return err
	}
	buf.WriteString(`,"TranslatorProvider":`)
	/* Falling back. type=bots.TranslatorProvider kind=func */
	err = buf.Encode(j.TranslatorProvider)
	if err != nil {
		return err
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtBaseHandlerbase = iota
	ffjtBaseHandlernosuchkey

	ffjtBaseHandlerWebhookDriver

	ffjtBaseHandlerBotHost

	ffjtBaseHandlerBotPlatform

	ffjtBaseHandlerTranslatorProvider
)

var ffjKeyBaseHandlerWebhookDriver = []byte("WebhookDriver")

var ffjKeyBaseHandlerBotHost = []byte("BotHost")

var ffjKeyBaseHandlerBotPlatform = []byte("BotPlatform")

var ffjKeyBaseHandlerTranslatorProvider = []byte("TranslatorProvider")

// UnmarshalJSON umarshall json - template of ffjson
func (j *BaseHandler) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *BaseHandler) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtBaseHandlerbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtBaseHandlernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'B':

					if bytes.Equal(ffjKeyBaseHandlerBotHost, kn) {
						currentKey = ffjtBaseHandlerBotHost
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBaseHandlerBotPlatform, kn) {
						currentKey = ffjtBaseHandlerBotPlatform
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyBaseHandlerTranslatorProvider, kn) {
						currentKey = ffjtBaseHandlerTranslatorProvider
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'W':

					if bytes.Equal(ffjKeyBaseHandlerWebhookDriver, kn) {
						currentKey = ffjtBaseHandlerWebhookDriver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyBaseHandlerTranslatorProvider, kn) {
					currentKey = ffjtBaseHandlerTranslatorProvider
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBaseHandlerBotPlatform, kn) {
					currentKey = ffjtBaseHandlerBotPlatform
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBaseHandlerBotHost, kn) {
					currentKey = ffjtBaseHandlerBotHost
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBaseHandlerWebhookDriver, kn) {
					currentKey = ffjtBaseHandlerWebhookDriver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtBaseHandlernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtBaseHandlerWebhookDriver:
					goto handle_WebhookDriver

				case ffjtBaseHandlerBotHost:
					goto handle_BotHost

				case ffjtBaseHandlerBotPlatform:
					goto handle_BotPlatform

				case ffjtBaseHandlerTranslatorProvider:
					goto handle_TranslatorProvider

				case ffjtBaseHandlernosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_WebhookDriver:

	/* handler: j.WebhookDriver type=bots.WebhookDriver kind=interface quoted=false*/

	{
		/* Falling back. type=bots.WebhookDriver kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.WebhookDriver)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BotHost:

	/* handler: j.BotHost type=bots.BotHost kind=interface quoted=false*/

	{
		/* Falling back. type=bots.BotHost kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.BotHost)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BotPlatform:

	/* handler: j.BotPlatform type=bots.BotPlatform kind=interface quoted=false*/

	{
		/* Falling back. type=bots.BotPlatform kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.BotPlatform)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TranslatorProvider:

	/* handler: j.TranslatorProvider type=bots.TranslatorProvider kind=func quoted=false*/

	{
		/* Falling back. type=bots.TranslatorProvider kind=func */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.TranslatorProvider)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *EntryInput) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *EntryInput) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Entry":`)
	/* Interface types must use runtime reflection. type=bots.WebhookEntry kind=interface */
	err = buf.Encode(j.Entry)
	if err != nil {
		return err
	}
	buf.WriteString(`,"Input":`)
	/* Interface types must use runtime reflection. type=bots.webhookInput kind=interface */
	err = buf.Encode(j.Input)
	if err != nil {
		return err
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtEntryInputbase = iota
	ffjtEntryInputnosuchkey

	ffjtEntryInputEntry

	ffjtEntryInputInput
)

var ffjKeyEntryInputEntry = []byte("Entry")

var ffjKeyEntryInputInput = []byte("Input")

// UnmarshalJSON umarshall json - template of ffjson
func (j *EntryInput) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *EntryInput) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtEntryInputbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtEntryInputnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'E':

					if bytes.Equal(ffjKeyEntryInputEntry, kn) {
						currentKey = ffjtEntryInputEntry
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffjKeyEntryInputInput, kn) {
						currentKey = ffjtEntryInputInput
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyEntryInputInput, kn) {
					currentKey = ffjtEntryInputInput
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEntryInputEntry, kn) {
					currentKey = ffjtEntryInputEntry
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtEntryInputnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtEntryInputEntry:
					goto handle_Entry

				case ffjtEntryInputInput:
					goto handle_Input

				case ffjtEntryInputnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Entry:

	/* handler: j.Entry type=bots.WebhookEntry kind=interface quoted=false*/

	{
		/* Falling back. type=bots.WebhookEntry kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Entry)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Input:

	/* handler: j.Input type=bots.webhookInput kind=interface quoted=false*/

	{
		/* Falling back. type=bots.webhookInput kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Input)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *EntryInputs) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *EntryInputs) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Entry":`)
	/* Interface types must use runtime reflection. type=bots.WebhookEntry kind=interface */
	err = buf.Encode(j.Entry)
	if err != nil {
		return err
	}
	buf.WriteString(`,"Inputs":`)
	if j.Inputs != nil {
		buf.WriteString(`[`)
		for i, v := range j.Inputs {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Interface types must use runtime reflection. type=bots.webhookInput kind=interface */
			err = buf.Encode(v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtEntryInputsbase = iota
	ffjtEntryInputsnosuchkey

	ffjtEntryInputsEntry

	ffjtEntryInputsInputs
)

var ffjKeyEntryInputsEntry = []byte("Entry")

var ffjKeyEntryInputsInputs = []byte("Inputs")

// UnmarshalJSON umarshall json - template of ffjson
func (j *EntryInputs) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *EntryInputs) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtEntryInputsbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtEntryInputsnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'E':

					if bytes.Equal(ffjKeyEntryInputsEntry, kn) {
						currentKey = ffjtEntryInputsEntry
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffjKeyEntryInputsInputs, kn) {
						currentKey = ffjtEntryInputsInputs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyEntryInputsInputs, kn) {
					currentKey = ffjtEntryInputsInputs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyEntryInputsEntry, kn) {
					currentKey = ffjtEntryInputsEntry
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtEntryInputsnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtEntryInputsEntry:
					goto handle_Entry

				case ffjtEntryInputsInputs:
					goto handle_Inputs

				case ffjtEntryInputsnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Entry:

	/* handler: j.Entry type=bots.WebhookEntry kind=interface quoted=false*/

	{
		/* Falling back. type=bots.WebhookEntry kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Entry)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Inputs:

	/* handler: j.Inputs type=[]bots.webhookInput kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Inputs = nil
		} else {

			j.Inputs = []WebhookInput{}

			wantVal := true

			for {

				var tmpJInputs WebhookInput

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJInputs type=bots.webhookInput kind=interface quoted=false*/

				{
					/* Falling back. type=bots.webhookInput kind=interface */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmpJInputs)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				j.Inputs = append(j.Inputs, tmpJInputs)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *MessageFromBot) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *MessageFromBot) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if j.ToChat != nil {
		buf.WriteString(`"ToChat":`)
		/* Interface types must use runtime reflection. type=bots.ChatUID kind=interface */
		err = buf.Encode(j.ToChat)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if j.BotMessage != nil {
		buf.WriteString(`"BotMessage":`)
		/* Interface types must use runtime reflection. type=bots.BotMessage kind=interface */
		err = buf.Encode(j.BotMessage)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if j.FbmAttachment != nil {
		if true {
			buf.WriteString(`"FbmAttachment":`)

			{

				err = j.FbmAttachment.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(j.Text) != 0 {
		buf.WriteString(`"Text":`)
		fflib.WriteJsonString(buf, string(j.Text))
		buf.WriteByte(',')
	}
	if j.Format != 0 {
		buf.WriteString(`"Format":`)
		fflib.FormatBits2(buf, uint64(j.Format), 10, j.Format < 0)
		buf.WriteByte(',')
	}
	if j.DisableWebPagePreview != false {
		if j.DisableWebPagePreview {
			buf.WriteString(`"DisableWebPagePreview":true`)
		} else {
			buf.WriteString(`"DisableWebPagePreview":false`)
		}
		buf.WriteByte(',')
	}
	if j.DisableNotification != false {
		if j.DisableNotification {
			buf.WriteString(`"DisableNotification":true`)
		} else {
			buf.WriteString(`"DisableNotification":false`)
		}
		buf.WriteByte(',')
	}
	if j.Keyboard != nil {
		buf.WriteString(`"Keyboard":`)
		/* Interface types must use runtime reflection. type=bots.Keyboard kind=interface */
		err = buf.Encode(j.Keyboard)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if j.IsEdit != false {
		if j.IsEdit {
			buf.WriteString(`"IsEdit":true`)
		} else {
			buf.WriteString(`"IsEdit":false`)
		}
		buf.WriteByte(',')
	}
	if j.EditMessageUID != nil {
		buf.WriteString(`"EditMessageUID":`)
		/* Interface types must use runtime reflection. type=bots.MessageUID kind=interface */
		err = buf.Encode(j.EditMessageUID)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtMessageFromBotbase = iota
	ffjtMessageFromBotnosuchkey

	ffjtMessageFromBotToChat

	ffjtMessageFromBotBotMessage

	ffjtMessageFromBotFbmAttachment

	ffjtMessageFromBotText

	ffjtMessageFromBotFormat

	ffjtMessageFromBotDisableWebPagePreview

	ffjtMessageFromBotDisableNotification

	ffjtMessageFromBotKeyboard

	ffjtMessageFromBotIsEdit

	ffjtMessageFromBotEditMessageUID
)

var ffjKeyMessageFromBotToChat = []byte("ToChat")

var ffjKeyMessageFromBotBotMessage = []byte("BotMessage")

var ffjKeyMessageFromBotFbmAttachment = []byte("FbmAttachment")

var ffjKeyMessageFromBotText = []byte("Text")

var ffjKeyMessageFromBotFormat = []byte("Format")

var ffjKeyMessageFromBotDisableWebPagePreview = []byte("DisableWebPagePreview")

var ffjKeyMessageFromBotDisableNotification = []byte("DisableNotification")

var ffjKeyMessageFromBotKeyboard = []byte("Keyboard")

var ffjKeyMessageFromBotIsEdit = []byte("IsEdit")

var ffjKeyMessageFromBotEditMessageUID = []byte("EditMessageUID")

// UnmarshalJSON umarshall json - template of ffjson
func (j *MessageFromBot) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *MessageFromBot) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtMessageFromBotbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtMessageFromBotnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'B':

					if bytes.Equal(ffjKeyMessageFromBotBotMessage, kn) {
						currentKey = ffjtMessageFromBotBotMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'D':

					if bytes.Equal(ffjKeyMessageFromBotDisableWebPagePreview, kn) {
						currentKey = ffjtMessageFromBotDisableWebPagePreview
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyMessageFromBotDisableNotification, kn) {
						currentKey = ffjtMessageFromBotDisableNotification
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffjKeyMessageFromBotEditMessageUID, kn) {
						currentKey = ffjtMessageFromBotEditMessageUID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'F':

					if bytes.Equal(ffjKeyMessageFromBotFbmAttachment, kn) {
						currentKey = ffjtMessageFromBotFbmAttachment
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyMessageFromBotFormat, kn) {
						currentKey = ffjtMessageFromBotFormat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffjKeyMessageFromBotIsEdit, kn) {
						currentKey = ffjtMessageFromBotIsEdit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'K':

					if bytes.Equal(ffjKeyMessageFromBotKeyboard, kn) {
						currentKey = ffjtMessageFromBotKeyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyMessageFromBotToChat, kn) {
						currentKey = ffjtMessageFromBotToChat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyMessageFromBotText, kn) {
						currentKey = ffjtMessageFromBotText
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyMessageFromBotEditMessageUID, kn) {
					currentKey = ffjtMessageFromBotEditMessageUID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageFromBotIsEdit, kn) {
					currentKey = ffjtMessageFromBotIsEdit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageFromBotKeyboard, kn) {
					currentKey = ffjtMessageFromBotKeyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageFromBotDisableNotification, kn) {
					currentKey = ffjtMessageFromBotDisableNotification
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageFromBotDisableWebPagePreview, kn) {
					currentKey = ffjtMessageFromBotDisableWebPagePreview
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageFromBotFormat, kn) {
					currentKey = ffjtMessageFromBotFormat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageFromBotText, kn) {
					currentKey = ffjtMessageFromBotText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageFromBotFbmAttachment, kn) {
					currentKey = ffjtMessageFromBotFbmAttachment
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyMessageFromBotBotMessage, kn) {
					currentKey = ffjtMessageFromBotBotMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyMessageFromBotToChat, kn) {
					currentKey = ffjtMessageFromBotToChat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtMessageFromBotnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtMessageFromBotToChat:
					goto handle_ToChat

				case ffjtMessageFromBotBotMessage:
					goto handle_BotMessage

				case ffjtMessageFromBotFbmAttachment:
					goto handle_FbmAttachment

				case ffjtMessageFromBotText:
					goto handle_Text

				case ffjtMessageFromBotFormat:
					goto handle_Format

				case ffjtMessageFromBotDisableWebPagePreview:
					goto handle_DisableWebPagePreview

				case ffjtMessageFromBotDisableNotification:
					goto handle_DisableNotification

				case ffjtMessageFromBotKeyboard:
					goto handle_Keyboard

				case ffjtMessageFromBotIsEdit:
					goto handle_IsEdit

				case ffjtMessageFromBotEditMessageUID:
					goto handle_EditMessageUID

				case ffjtMessageFromBotnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ToChat:

	/* handler: j.ToChat type=bots.ChatUID kind=interface quoted=false*/

	{
		/* Falling back. type=bots.ChatUID kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.ToChat)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BotMessage:

	/* handler: j.BotMessage type=bots.BotMessage kind=interface quoted=false*/

	{
		/* Falling back. type=bots.BotMessage kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.BotMessage)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FbmAttachment:

	/* handler: j.FbmAttachment type=fbm_api.RequestAttachment kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.FbmAttachment = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if j.FbmAttachment == nil {
			j.FbmAttachment = new(fbmbotapi.RequestAttachment)
		}

		err = j.FbmAttachment.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Format:

	/* handler: j.Format type=bots.MessageFormat kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for MessageFormat", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Format = MessageFormat(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisableWebPagePreview:

	/* handler: j.DisableWebPagePreview type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.DisableWebPagePreview = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.DisableWebPagePreview = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisableNotification:

	/* handler: j.DisableNotification type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.DisableNotification = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.DisableNotification = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: j.Keyboard type=bots.Keyboard kind=interface quoted=false*/

	{
		/* Falling back. type=bots.Keyboard kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Keyboard)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsEdit:

	/* handler: j.IsEdit type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsEdit = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsEdit = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EditMessageUID:

	/* handler: j.EditMessageUID type=bots.MessageUID kind=interface quoted=false*/

	{
		/* Falling back. type=bots.MessageUID kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.EditMessageUID)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *TextMessageFromBot) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *TextMessageFromBot) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(j.Text) != 0 {
		buf.WriteString(`"Text":`)
		fflib.WriteJsonString(buf, string(j.Text))
		buf.WriteByte(',')
	}
	if j.Format != 0 {
		buf.WriteString(`"Format":`)
		fflib.FormatBits2(buf, uint64(j.Format), 10, j.Format < 0)
		buf.WriteByte(',')
	}
	if j.DisableWebPagePreview != false {
		if j.DisableWebPagePreview {
			buf.WriteString(`"DisableWebPagePreview":true`)
		} else {
			buf.WriteString(`"DisableWebPagePreview":false`)
		}
		buf.WriteByte(',')
	}
	if j.DisableNotification != false {
		if j.DisableNotification {
			buf.WriteString(`"DisableNotification":true`)
		} else {
			buf.WriteString(`"DisableNotification":false`)
		}
		buf.WriteByte(',')
	}
	if j.Keyboard != nil {
		buf.WriteString(`"Keyboard":`)
		/* Interface types must use runtime reflection. type=bots.Keyboard kind=interface */
		err = buf.Encode(j.Keyboard)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if j.IsEdit != false {
		if j.IsEdit {
			buf.WriteString(`"IsEdit":true`)
		} else {
			buf.WriteString(`"IsEdit":false`)
		}
		buf.WriteByte(',')
	}
	if j.EditMessageUID != nil {
		buf.WriteString(`"EditMessageUID":`)
		/* Interface types must use runtime reflection. type=bots.MessageUID kind=interface */
		err = buf.Encode(j.EditMessageUID)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtTextMessageFromBotbase = iota
	ffjtTextMessageFromBotnosuchkey

	ffjtTextMessageFromBotText

	ffjtTextMessageFromBotFormat

	ffjtTextMessageFromBotDisableWebPagePreview

	ffjtTextMessageFromBotDisableNotification

	ffjtTextMessageFromBotKeyboard

	ffjtTextMessageFromBotIsEdit

	ffjtTextMessageFromBotEditMessageUID
)

var ffjKeyTextMessageFromBotText = []byte("Text")

var ffjKeyTextMessageFromBotFormat = []byte("Format")

var ffjKeyTextMessageFromBotDisableWebPagePreview = []byte("DisableWebPagePreview")

var ffjKeyTextMessageFromBotDisableNotification = []byte("DisableNotification")

var ffjKeyTextMessageFromBotKeyboard = []byte("Keyboard")

var ffjKeyTextMessageFromBotIsEdit = []byte("IsEdit")

var ffjKeyTextMessageFromBotEditMessageUID = []byte("EditMessageUID")

// UnmarshalJSON umarshall json - template of ffjson
func (j *TextMessageFromBot) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *TextMessageFromBot) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtTextMessageFromBotbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtTextMessageFromBotnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'D':

					if bytes.Equal(ffjKeyTextMessageFromBotDisableWebPagePreview, kn) {
						currentKey = ffjtTextMessageFromBotDisableWebPagePreview
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTextMessageFromBotDisableNotification, kn) {
						currentKey = ffjtTextMessageFromBotDisableNotification
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffjKeyTextMessageFromBotEditMessageUID, kn) {
						currentKey = ffjtTextMessageFromBotEditMessageUID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'F':

					if bytes.Equal(ffjKeyTextMessageFromBotFormat, kn) {
						currentKey = ffjtTextMessageFromBotFormat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffjKeyTextMessageFromBotIsEdit, kn) {
						currentKey = ffjtTextMessageFromBotIsEdit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'K':

					if bytes.Equal(ffjKeyTextMessageFromBotKeyboard, kn) {
						currentKey = ffjtTextMessageFromBotKeyboard
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyTextMessageFromBotText, kn) {
						currentKey = ffjtTextMessageFromBotText
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyTextMessageFromBotEditMessageUID, kn) {
					currentKey = ffjtTextMessageFromBotEditMessageUID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTextMessageFromBotIsEdit, kn) {
					currentKey = ffjtTextMessageFromBotIsEdit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTextMessageFromBotKeyboard, kn) {
					currentKey = ffjtTextMessageFromBotKeyboard
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTextMessageFromBotDisableNotification, kn) {
					currentKey = ffjtTextMessageFromBotDisableNotification
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTextMessageFromBotDisableWebPagePreview, kn) {
					currentKey = ffjtTextMessageFromBotDisableWebPagePreview
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTextMessageFromBotFormat, kn) {
					currentKey = ffjtTextMessageFromBotFormat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTextMessageFromBotText, kn) {
					currentKey = ffjtTextMessageFromBotText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtTextMessageFromBotnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtTextMessageFromBotText:
					goto handle_Text

				case ffjtTextMessageFromBotFormat:
					goto handle_Format

				case ffjtTextMessageFromBotDisableWebPagePreview:
					goto handle_DisableWebPagePreview

				case ffjtTextMessageFromBotDisableNotification:
					goto handle_DisableNotification

				case ffjtTextMessageFromBotKeyboard:
					goto handle_Keyboard

				case ffjtTextMessageFromBotIsEdit:
					goto handle_IsEdit

				case ffjtTextMessageFromBotEditMessageUID:
					goto handle_EditMessageUID

				case ffjtTextMessageFromBotnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Format:

	/* handler: j.Format type=bots.MessageFormat kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for MessageFormat", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Format = MessageFormat(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisableWebPagePreview:

	/* handler: j.DisableWebPagePreview type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.DisableWebPagePreview = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.DisableWebPagePreview = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisableNotification:

	/* handler: j.DisableNotification type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.DisableNotification = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.DisableNotification = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keyboard:

	/* handler: j.Keyboard type=bots.Keyboard kind=interface quoted=false*/

	{
		/* Falling back. type=bots.Keyboard kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Keyboard)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsEdit:

	/* handler: j.IsEdit type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.IsEdit = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.IsEdit = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EditMessageUID:

	/* handler: j.EditMessageUID type=bots.MessageUID kind=interface quoted=false*/

	{
		/* Falling back. type=bots.MessageUID kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.EditMessageUID)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
