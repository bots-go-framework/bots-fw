// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botsfw (interfaces: BotPlatform)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botsfw BotPlatform
//

// Package mock_botsfw is a generated GoMock package.
package mock_botsfw

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBotPlatform is a mock of BotPlatform interface.
type MockBotPlatform struct {
	ctrl     *gomock.Controller
	recorder *MockBotPlatformMockRecorder
	isgomock struct{}
}

// MockBotPlatformMockRecorder is the mock recorder for MockBotPlatform.
type MockBotPlatformMockRecorder struct {
	mock *MockBotPlatform
}

// NewMockBotPlatform creates a new mock instance.
func NewMockBotPlatform(ctrl *gomock.Controller) *MockBotPlatform {
	mock := &MockBotPlatform{ctrl: ctrl}
	mock.recorder = &MockBotPlatformMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotPlatform) EXPECT() *MockBotPlatformMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockBotPlatform) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockBotPlatformMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBotPlatform)(nil).ID))
}

// Version mocks base method.
func (m *MockBotPlatform) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockBotPlatformMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockBotPlatform)(nil).Version))
}
