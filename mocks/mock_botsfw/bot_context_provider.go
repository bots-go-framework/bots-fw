// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botsfw (interfaces: BotContextProvider)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botsfw BotContextProvider
//

// Package mock_botsfw is a generated GoMock package.
package mock_botsfw

import (
	context "context"
	reflect "reflect"

	botsfw "github.com/bots-go-framework/bots-fw/botsfw"
	botsfwconst "github.com/bots-go-framework/bots-fw/botsfwconst"
	gomock "go.uber.org/mock/gomock"
)

// MockBotContextProvider is a mock of BotContextProvider interface.
type MockBotContextProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBotContextProviderMockRecorder
	isgomock struct{}
}

// MockBotContextProviderMockRecorder is the mock recorder for MockBotContextProvider.
type MockBotContextProviderMockRecorder struct {
	mock *MockBotContextProvider
}

// NewMockBotContextProvider creates a new mock instance.
func NewMockBotContextProvider(ctrl *gomock.Controller) *MockBotContextProvider {
	mock := &MockBotContextProvider{ctrl: ctrl}
	mock.recorder = &MockBotContextProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotContextProvider) EXPECT() *MockBotContextProviderMockRecorder {
	return m.recorder
}

// GetBotContext mocks base method.
func (m *MockBotContextProvider) GetBotContext(ctx context.Context, platformID botsfwconst.Platform, botID string) (*botsfw.BotContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotContext", ctx, platformID, botID)
	ret0, _ := ret[0].(*botsfw.BotContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotContext indicates an expected call of GetBotContext.
func (mr *MockBotContextProviderMockRecorder) GetBotContext(ctx, platformID, botID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotContext", reflect.TypeOf((*MockBotContextProvider)(nil).GetBotContext), ctx, platformID, botID)
}
