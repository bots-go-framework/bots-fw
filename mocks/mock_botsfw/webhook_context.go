// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botsfw (interfaces: WebhookContext)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botsfw WebhookContext
//

// Package mock_botsfw is a generated GoMock package.
package mock_botsfw

import (
	context "context"
	http "net/http"
	reflect "reflect"

	botsfwmodels "github.com/bots-go-framework/bots-fw-store/botsfwmodels"
	botinput "github.com/bots-go-framework/bots-fw/botinput"
	botsdal "github.com/bots-go-framework/bots-fw/botsdal"
	botsfw "github.com/bots-go-framework/bots-fw/botsfw"
	dal "github.com/dal-go/dalgo/dal"
	i18n "github.com/strongo/i18n"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookContext is a mock of WebhookContext interface.
type MockWebhookContext struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookContextMockRecorder
	isgomock struct{}
}

// MockWebhookContextMockRecorder is the mock recorder for MockWebhookContext.
type MockWebhookContextMockRecorder struct {
	mock *MockWebhookContext
}

// NewMockWebhookContext creates a new mock instance.
func NewMockWebhookContext(ctrl *gomock.Controller) *MockWebhookContext {
	mock := &MockWebhookContext{ctrl: ctrl}
	mock.recorder = &MockWebhookContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookContext) EXPECT() *MockWebhookContextMockRecorder {
	return m.recorder
}

// Analytics mocks base method.
func (m *MockWebhookContext) Analytics() botsfw.WebhookAnalytics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analytics")
	ret0, _ := ret[0].(botsfw.WebhookAnalytics)
	return ret0
}

// Analytics indicates an expected call of Analytics.
func (mr *MockWebhookContextMockRecorder) Analytics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analytics", reflect.TypeOf((*MockWebhookContext)(nil).Analytics))
}

// AppContext mocks base method.
func (m *MockWebhookContext) AppContext() botsfw.AppContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppContext")
	ret0, _ := ret[0].(botsfw.AppContext)
	return ret0
}

// AppContext indicates an expected call of AppContext.
func (mr *MockWebhookContextMockRecorder) AppContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppContext", reflect.TypeOf((*MockWebhookContext)(nil).AppContext))
}

// AppUserData mocks base method.
func (m *MockWebhookContext) AppUserData() (botsfwmodels.AppUserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppUserData")
	ret0, _ := ret[0].(botsfwmodels.AppUserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppUserData indicates an expected call of AppUserData.
func (mr *MockWebhookContextMockRecorder) AppUserData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppUserData", reflect.TypeOf((*MockWebhookContext)(nil).AppUserData))
}

// AppUserID mocks base method.
func (m *MockWebhookContext) AppUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// AppUserID indicates an expected call of AppUserID.
func (mr *MockWebhookContextMockRecorder) AppUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppUserID", reflect.TypeOf((*MockWebhookContext)(nil).AppUserID))
}

// BotContext mocks base method.
func (m *MockWebhookContext) BotContext() botsfw.BotContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotContext")
	ret0, _ := ret[0].(botsfw.BotContext)
	return ret0
}

// BotContext indicates an expected call of BotContext.
func (mr *MockWebhookContextMockRecorder) BotContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotContext", reflect.TypeOf((*MockWebhookContext)(nil).BotContext))
}

// BotPlatform mocks base method.
func (m *MockWebhookContext) BotPlatform() botsfw.BotPlatform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotPlatform")
	ret0, _ := ret[0].(botsfw.BotPlatform)
	return ret0
}

// BotPlatform indicates an expected call of BotPlatform.
func (mr *MockWebhookContextMockRecorder) BotPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotPlatform", reflect.TypeOf((*MockWebhookContext)(nil).BotPlatform))
}

// ChatData mocks base method.
func (m *MockWebhookContext) ChatData() botsfwmodels.BotChatData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatData")
	ret0, _ := ret[0].(botsfwmodels.BotChatData)
	return ret0
}

// ChatData indicates an expected call of ChatData.
func (mr *MockWebhookContextMockRecorder) ChatData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatData", reflect.TypeOf((*MockWebhookContext)(nil).ChatData))
}

// CommandText mocks base method.
func (m *MockWebhookContext) CommandText(title, icon string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandText", title, icon)
	ret0, _ := ret[0].(string)
	return ret0
}

// CommandText indicates an expected call of CommandText.
func (mr *MockWebhookContextMockRecorder) CommandText(title, icon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandText", reflect.TypeOf((*MockWebhookContext)(nil).CommandText), title, icon)
}

// Context mocks base method.
func (m *MockWebhookContext) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWebhookContextMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWebhookContext)(nil).Context))
}

// DB mocks base method.
func (m *MockWebhookContext) DB() dal.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(dal.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockWebhookContextMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockWebhookContext)(nil).DB))
}

// Environment mocks base method.
func (m *MockWebhookContext) Environment() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment")
	ret0, _ := ret[0].(string)
	return ret0
}

// Environment indicates an expected call of Environment.
func (mr *MockWebhookContextMockRecorder) Environment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockWebhookContext)(nil).Environment))
}

// ExecutionContext mocks base method.
func (m *MockWebhookContext) ExecutionContext() botsfw.ExecutionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionContext")
	ret0, _ := ret[0].(botsfw.ExecutionContext)
	return ret0
}

// ExecutionContext indicates an expected call of ExecutionContext.
func (mr *MockWebhookContextMockRecorder) ExecutionContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionContext", reflect.TypeOf((*MockWebhookContext)(nil).ExecutionContext))
}

// GetBotCode mocks base method.
func (m *MockWebhookContext) GetBotCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBotCode indicates an expected call of GetBotCode.
func (mr *MockWebhookContextMockRecorder) GetBotCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotCode", reflect.TypeOf((*MockWebhookContext)(nil).GetBotCode))
}

// GetBotSettings mocks base method.
func (m *MockWebhookContext) GetBotSettings() *botsfw.BotSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotSettings")
	ret0, _ := ret[0].(*botsfw.BotSettings)
	return ret0
}

// GetBotSettings indicates an expected call of GetBotSettings.
func (mr *MockWebhookContextMockRecorder) GetBotSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotSettings", reflect.TypeOf((*MockWebhookContext)(nil).GetBotSettings))
}

// GetBotUser mocks base method.
func (m *MockWebhookContext) GetBotUser() (botsdal.BotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUser")
	ret0, _ := ret[0].(botsdal.BotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotUser indicates an expected call of GetBotUser.
func (mr *MockWebhookContextMockRecorder) GetBotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUser", reflect.TypeOf((*MockWebhookContext)(nil).GetBotUser))
}

// GetBotUserForUpdate mocks base method.
func (m *MockWebhookContext) GetBotUserForUpdate(ctx context.Context, tx dal.ReadwriteTransaction) (botsdal.BotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUserForUpdate", ctx, tx)
	ret0, _ := ret[0].(botsdal.BotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotUserForUpdate indicates an expected call of GetBotUserForUpdate.
func (mr *MockWebhookContextMockRecorder) GetBotUserForUpdate(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUserForUpdate", reflect.TypeOf((*MockWebhookContext)(nil).GetBotUserForUpdate), ctx, tx)
}

// GetBotUserID mocks base method.
func (m *MockWebhookContext) GetBotUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBotUserID indicates an expected call of GetBotUserID.
func (mr *MockWebhookContextMockRecorder) GetBotUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUserID", reflect.TypeOf((*MockWebhookContext)(nil).GetBotUserID))
}

// Input mocks base method.
func (m *MockWebhookContext) Input() botinput.WebhookInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(botinput.WebhookInput)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockWebhookContextMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockWebhookContext)(nil).Input))
}

// IsInGroup mocks base method.
func (m *MockWebhookContext) IsInGroup() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInGroup")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInGroup indicates an expected call of IsInGroup.
func (mr *MockWebhookContextMockRecorder) IsInGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInGroup", reflect.TypeOf((*MockWebhookContext)(nil).IsInGroup))
}

// IsNewerThen mocks base method.
func (m *MockWebhookContext) IsNewerThen(chatEntity botsfwmodels.BotChatData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNewerThen", chatEntity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNewerThen indicates an expected call of IsNewerThen.
func (mr *MockWebhookContextMockRecorder) IsNewerThen(chatEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNewerThen", reflect.TypeOf((*MockWebhookContext)(nil).IsNewerThen), chatEntity)
}

// Locale mocks base method.
func (m *MockWebhookContext) Locale() i18n.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locale")
	ret0, _ := ret[0].(i18n.Locale)
	return ret0
}

// Locale indicates an expected call of Locale.
func (mr *MockWebhookContextMockRecorder) Locale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locale", reflect.TypeOf((*MockWebhookContext)(nil).Locale))
}

// MustBotChatID mocks base method.
func (m *MockWebhookContext) MustBotChatID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBotChatID")
	ret0, _ := ret[0].(string)
	return ret0
}

// MustBotChatID indicates an expected call of MustBotChatID.
func (mr *MockWebhookContextMockRecorder) MustBotChatID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBotChatID", reflect.TypeOf((*MockWebhookContext)(nil).MustBotChatID))
}

// NewEditMessage mocks base method.
func (m *MockWebhookContext) NewEditMessage(text string, format botsfw.MessageFormat) (botsfw.MessageFromBot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEditMessage", text, format)
	ret0, _ := ret[0].(botsfw.MessageFromBot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewEditMessage indicates an expected call of NewEditMessage.
func (mr *MockWebhookContextMockRecorder) NewEditMessage(text, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEditMessage", reflect.TypeOf((*MockWebhookContext)(nil).NewEditMessage), text, format)
}

// NewMessage mocks base method.
func (m *MockWebhookContext) NewMessage(text string) botsfw.MessageFromBot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessage", text)
	ret0, _ := ret[0].(botsfw.MessageFromBot)
	return ret0
}

// NewMessage indicates an expected call of NewMessage.
func (mr *MockWebhookContextMockRecorder) NewMessage(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockWebhookContext)(nil).NewMessage), text)
}

// NewMessageByCode mocks base method.
func (m *MockWebhookContext) NewMessageByCode(messageCode string, a ...any) botsfw.MessageFromBot {
	m.ctrl.T.Helper()
	varargs := []any{messageCode}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "NewMessageByCode", varargs...)
	ret0, _ := ret[0].(botsfw.MessageFromBot)
	return ret0
}

// NewMessageByCode indicates an expected call of NewMessageByCode.
func (mr *MockWebhookContextMockRecorder) NewMessageByCode(messageCode any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{messageCode}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageByCode", reflect.TypeOf((*MockWebhookContext)(nil).NewMessageByCode), varargs...)
}

// RecordsFieldsSetter mocks base method.
func (m *MockWebhookContext) RecordsFieldsSetter() botsfw.BotRecordsFieldsSetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordsFieldsSetter")
	ret0, _ := ret[0].(botsfw.BotRecordsFieldsSetter)
	return ret0
}

// RecordsFieldsSetter indicates an expected call of RecordsFieldsSetter.
func (mr *MockWebhookContextMockRecorder) RecordsFieldsSetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordsFieldsSetter", reflect.TypeOf((*MockWebhookContext)(nil).RecordsFieldsSetter))
}

// Request mocks base method.
func (m *MockWebhookContext) Request() *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockWebhookContextMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockWebhookContext)(nil).Request))
}

// Responder mocks base method.
func (m *MockWebhookContext) Responder() botsfw.WebhookResponder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Responder")
	ret0, _ := ret[0].(botsfw.WebhookResponder)
	return ret0
}

// Responder indicates an expected call of Responder.
func (mr *MockWebhookContextMockRecorder) Responder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Responder", reflect.TypeOf((*MockWebhookContext)(nil).Responder))
}

// SaveBotChat mocks base method.
func (m *MockWebhookContext) SaveBotChat() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBotChat")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBotChat indicates an expected call of SaveBotChat.
func (mr *MockWebhookContextMockRecorder) SaveBotChat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBotChat", reflect.TypeOf((*MockWebhookContext)(nil).SaveBotChat))
}

// SetContext mocks base method.
func (m *MockWebhookContext) SetContext(c context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", c)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockWebhookContextMockRecorder) SetContext(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockWebhookContext)(nil).SetContext), c)
}

// SetLocale mocks base method.
func (m *MockWebhookContext) SetLocale(code5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLocale", code5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLocale indicates an expected call of SetLocale.
func (mr *MockWebhookContextMockRecorder) SetLocale(code5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocale", reflect.TypeOf((*MockWebhookContext)(nil).SetLocale), code5)
}

// Translate mocks base method.
func (m *MockWebhookContext) Translate(key string, args ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Translate", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Translate indicates an expected call of Translate.
func (mr *MockWebhookContextMockRecorder) Translate(key any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockWebhookContext)(nil).Translate), varargs...)
}

// TranslateNoWarning mocks base method.
func (m *MockWebhookContext) TranslateNoWarning(key string, args ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TranslateNoWarning", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// TranslateNoWarning indicates an expected call of TranslateNoWarning.
func (mr *MockWebhookContextMockRecorder) TranslateNoWarning(key any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateNoWarning", reflect.TypeOf((*MockWebhookContext)(nil).TranslateNoWarning), varargs...)
}

// TranslateWithMap mocks base method.
func (m *MockWebhookContext) TranslateWithMap(key string, args map[string]string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateWithMap", key, args)
	ret0, _ := ret[0].(string)
	return ret0
}

// TranslateWithMap indicates an expected call of TranslateWithMap.
func (mr *MockWebhookContextMockRecorder) TranslateWithMap(key, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateWithMap", reflect.TypeOf((*MockWebhookContext)(nil).TranslateWithMap), key, args)
}

// UpdateLastProcessed mocks base method.
func (m *MockWebhookContext) UpdateLastProcessed(chatEntity botsfwmodels.BotChatData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastProcessed", chatEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastProcessed indicates an expected call of UpdateLastProcessed.
func (mr *MockWebhookContextMockRecorder) UpdateLastProcessed(chatEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastProcessed", reflect.TypeOf((*MockWebhookContext)(nil).UpdateLastProcessed), chatEntity)
}
