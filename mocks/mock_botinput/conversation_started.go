// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: ConversationStarted)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput ConversationStarted
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConversationStarted is a mock of ConversationStarted interface.
type MockConversationStarted struct {
	ctrl     *gomock.Controller
	recorder *MockConversationStartedMockRecorder
	isgomock struct{}
}

// MockConversationStartedMockRecorder is the mock recorder for MockConversationStarted.
type MockConversationStartedMockRecorder struct {
	mock *MockConversationStarted
}

// NewMockConversationStarted creates a new mock instance.
func NewMockConversationStarted(ctrl *gomock.Controller) *MockConversationStarted {
	mock := &MockConversationStarted{ctrl: ctrl}
	mock.recorder = &MockConversationStartedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationStarted) EXPECT() *MockConversationStartedMockRecorder {
	return m.recorder
}

// ConversationStartedMessage mocks base method.
func (m *MockConversationStarted) ConversationStartedMessage() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationStartedMessage")
	ret0, _ := ret[0].(any)
	return ret0
}

// ConversationStartedMessage indicates an expected call of ConversationStartedMessage.
func (mr *MockConversationStartedMockRecorder) ConversationStartedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationStartedMessage", reflect.TypeOf((*MockConversationStarted)(nil).ConversationStartedMessage))
}
