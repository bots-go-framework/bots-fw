// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: ReferralMessage)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput ReferralMessage
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReferralMessage is a mock of ReferralMessage interface.
type MockReferralMessage struct {
	ctrl     *gomock.Controller
	recorder *MockReferralMessageMockRecorder
	isgomock struct{}
}

// MockReferralMessageMockRecorder is the mock recorder for MockReferralMessage.
type MockReferralMessageMockRecorder struct {
	mock *MockReferralMessage
}

// NewMockReferralMessage creates a new mock instance.
func NewMockReferralMessage(ctrl *gomock.Controller) *MockReferralMessage {
	mock := &MockReferralMessage{ctrl: ctrl}
	mock.recorder = &MockReferralMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferralMessage) EXPECT() *MockReferralMessageMockRecorder {
	return m.recorder
}

// RefData mocks base method.
func (m *MockReferralMessage) RefData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefData")
	ret0, _ := ret[0].(string)
	return ret0
}

// RefData indicates an expected call of RefData.
func (mr *MockReferralMessageMockRecorder) RefData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefData", reflect.TypeOf((*MockReferralMessage)(nil).RefData))
}

// Source mocks base method.
func (m *MockReferralMessage) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockReferralMessageMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockReferralMessage)(nil).Source))
}

// Type mocks base method.
func (m *MockReferralMessage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockReferralMessageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockReferralMessage)(nil).Type))
}
