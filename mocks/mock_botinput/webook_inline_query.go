// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: WebhookInlineQuery)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput WebhookInlineQuery
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	botinput "github.com/bots-go-framework/bots-fw/botinput"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookInlineQuery is a mock of WebhookInlineQuery interface.
type MockWebhookInlineQuery struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookInlineQueryMockRecorder
	isgomock struct{}
}

// MockWebhookInlineQueryMockRecorder is the mock recorder for MockWebhookInlineQuery.
type MockWebhookInlineQueryMockRecorder struct {
	mock *MockWebhookInlineQuery
}

// NewMockWebhookInlineQuery creates a new mock instance.
func NewMockWebhookInlineQuery(ctrl *gomock.Controller) *MockWebhookInlineQuery {
	mock := &MockWebhookInlineQuery{ctrl: ctrl}
	mock.recorder = &MockWebhookInlineQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookInlineQuery) EXPECT() *MockWebhookInlineQueryMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockWebhookInlineQuery) GetFrom() botinput.WebhookSender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(botinput.WebhookSender)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockWebhookInlineQueryMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockWebhookInlineQuery)(nil).GetFrom))
}

// GetID mocks base method.
func (m *MockWebhookInlineQuery) GetID() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockWebhookInlineQueryMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockWebhookInlineQuery)(nil).GetID))
}

// GetInlineQueryID mocks base method.
func (m *MockWebhookInlineQuery) GetInlineQueryID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlineQueryID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInlineQueryID indicates an expected call of GetInlineQueryID.
func (mr *MockWebhookInlineQueryMockRecorder) GetInlineQueryID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlineQueryID", reflect.TypeOf((*MockWebhookInlineQuery)(nil).GetInlineQueryID))
}

// GetOffset mocks base method.
func (m *MockWebhookInlineQuery) GetOffset() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffset")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOffset indicates an expected call of GetOffset.
func (mr *MockWebhookInlineQueryMockRecorder) GetOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockWebhookInlineQuery)(nil).GetOffset))
}

// GetQuery mocks base method.
func (m *MockWebhookInlineQuery) GetQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockWebhookInlineQueryMockRecorder) GetQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockWebhookInlineQuery)(nil).GetQuery))
}
