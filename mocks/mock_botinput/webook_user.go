// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: WebhookUser)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput WebhookUser
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookUser is a mock of WebhookUser interface.
type MockWebhookUser struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookUserMockRecorder
	isgomock struct{}
}

// MockWebhookUserMockRecorder is the mock recorder for MockWebhookUser.
type MockWebhookUserMockRecorder struct {
	mock *MockWebhookUser
}

// NewMockWebhookUser creates a new mock instance.
func NewMockWebhookUser(ctrl *gomock.Controller) *MockWebhookUser {
	mock := &MockWebhookUser{ctrl: ctrl}
	mock.recorder = &MockWebhookUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookUser) EXPECT() *MockWebhookUserMockRecorder {
	return m.recorder
}

// GetAvatar mocks base method.
func (m *MockWebhookUser) GetAvatar() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockWebhookUserMockRecorder) GetAvatar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockWebhookUser)(nil).GetAvatar))
}

// GetCountry mocks base method.
func (m *MockWebhookUser) GetCountry() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountry")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCountry indicates an expected call of GetCountry.
func (mr *MockWebhookUserMockRecorder) GetCountry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountry", reflect.TypeOf((*MockWebhookUser)(nil).GetCountry))
}

// GetFirstName mocks base method.
func (m *MockWebhookUser) GetFirstName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFirstName indicates an expected call of GetFirstName.
func (mr *MockWebhookUserMockRecorder) GetFirstName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstName", reflect.TypeOf((*MockWebhookUser)(nil).GetFirstName))
}

// GetID mocks base method.
func (m *MockWebhookUser) GetID() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockWebhookUserMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockWebhookUser)(nil).GetID))
}

// GetLanguage mocks base method.
func (m *MockWebhookUser) GetLanguage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockWebhookUserMockRecorder) GetLanguage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockWebhookUser)(nil).GetLanguage))
}

// GetLastName mocks base method.
func (m *MockWebhookUser) GetLastName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLastName indicates an expected call of GetLastName.
func (mr *MockWebhookUserMockRecorder) GetLastName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastName", reflect.TypeOf((*MockWebhookUser)(nil).GetLastName))
}

// GetUserName mocks base method.
func (m *MockWebhookUser) GetUserName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockWebhookUserMockRecorder) GetUserName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockWebhookUser)(nil).GetUserName))
}

// IsBotUser mocks base method.
func (m *MockWebhookUser) IsBotUser() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBotUser")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBotUser indicates an expected call of IsBotUser.
func (mr *MockWebhookUserMockRecorder) IsBotUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBotUser", reflect.TypeOf((*MockWebhookUser)(nil).IsBotUser))
}

// Platform mocks base method.
func (m *MockWebhookUser) Platform() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Platform")
	ret0, _ := ret[0].(string)
	return ret0
}

// Platform indicates an expected call of Platform.
func (mr *MockWebhookUserMockRecorder) Platform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Platform", reflect.TypeOf((*MockWebhookUser)(nil).Platform))
}
