// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: VoiceMessage)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput VoiceMessage
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"
	time "time"

	botinput "github.com/bots-go-framework/bots-fw/botinput"
	gomock "go.uber.org/mock/gomock"
)

// MockVoiceMessage is a mock of VoiceMessage interface.
type MockVoiceMessage struct {
	ctrl     *gomock.Controller
	recorder *MockVoiceMessageMockRecorder
	isgomock struct{}
}

// MockVoiceMessageMockRecorder is the mock recorder for MockVoiceMessage.
type MockVoiceMessageMockRecorder struct {
	mock *MockVoiceMessage
}

// NewMockVoiceMessage creates a new mock instance.
func NewMockVoiceMessage(ctrl *gomock.Controller) *MockVoiceMessage {
	mock := &MockVoiceMessage{ctrl: ctrl}
	mock.recorder = &MockVoiceMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoiceMessage) EXPECT() *MockVoiceMessageMockRecorder {
	return m.recorder
}

// BotChatID mocks base method.
func (m *MockVoiceMessage) BotChatID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotChatID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BotChatID indicates an expected call of BotChatID.
func (mr *MockVoiceMessageMockRecorder) BotChatID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotChatID", reflect.TypeOf((*MockVoiceMessage)(nil).BotChatID))
}

// Chat mocks base method.
func (m *MockVoiceMessage) Chat() botinput.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat")
	ret0, _ := ret[0].(botinput.Chat)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MockVoiceMessageMockRecorder) Chat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockVoiceMessage)(nil).Chat))
}

// GetRecipient mocks base method.
func (m *MockVoiceMessage) GetRecipient() botinput.Recipient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipient")
	ret0, _ := ret[0].(botinput.Recipient)
	return ret0
}

// GetRecipient indicates an expected call of GetRecipient.
func (mr *MockVoiceMessageMockRecorder) GetRecipient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipient", reflect.TypeOf((*MockVoiceMessage)(nil).GetRecipient))
}

// GetSender mocks base method.
func (m *MockVoiceMessage) GetSender() botinput.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSender")
	ret0, _ := ret[0].(botinput.User)
	return ret0
}

// GetSender indicates an expected call of GetSender.
func (mr *MockVoiceMessageMockRecorder) GetSender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSender", reflect.TypeOf((*MockVoiceMessage)(nil).GetSender))
}

// GetTime mocks base method.
func (m *MockVoiceMessage) GetTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockVoiceMessageMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockVoiceMessage)(nil).GetTime))
}

// InputType mocks base method.
func (m *MockVoiceMessage) InputType() botinput.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputType")
	ret0, _ := ret[0].(botinput.Type)
	return ret0
}

// InputType indicates an expected call of InputType.
func (mr *MockVoiceMessageMockRecorder) InputType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputType", reflect.TypeOf((*MockVoiceMessage)(nil).InputType))
}

// IntID mocks base method.
func (m *MockVoiceMessage) IntID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// IntID indicates an expected call of IntID.
func (mr *MockVoiceMessageMockRecorder) IntID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntID", reflect.TypeOf((*MockVoiceMessage)(nil).IntID))
}

// LogRequest mocks base method.
func (m *MockVoiceMessage) LogRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRequest")
}

// LogRequest indicates an expected call of LogRequest.
func (mr *MockVoiceMessageMockRecorder) LogRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequest", reflect.TypeOf((*MockVoiceMessage)(nil).LogRequest))
}

// StringID mocks base method.
func (m *MockVoiceMessage) StringID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringID")
	ret0, _ := ret[0].(string)
	return ret0
}

// StringID indicates an expected call of StringID.
func (mr *MockVoiceMessageMockRecorder) StringID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringID", reflect.TypeOf((*MockVoiceMessage)(nil).StringID))
}
