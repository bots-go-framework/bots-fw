// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: WebhookReferralMessage)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput WebhookReferralMessage
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookReferralMessage is a mock of WebhookReferralMessage interface.
type MockWebhookReferralMessage struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookReferralMessageMockRecorder
	isgomock struct{}
}

// MockWebhookReferralMessageMockRecorder is the mock recorder for MockWebhookReferralMessage.
type MockWebhookReferralMessageMockRecorder struct {
	mock *MockWebhookReferralMessage
}

// NewMockWebhookReferralMessage creates a new mock instance.
func NewMockWebhookReferralMessage(ctrl *gomock.Controller) *MockWebhookReferralMessage {
	mock := &MockWebhookReferralMessage{ctrl: ctrl}
	mock.recorder = &MockWebhookReferralMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookReferralMessage) EXPECT() *MockWebhookReferralMessageMockRecorder {
	return m.recorder
}

// RefData mocks base method.
func (m *MockWebhookReferralMessage) RefData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefData")
	ret0, _ := ret[0].(string)
	return ret0
}

// RefData indicates an expected call of RefData.
func (mr *MockWebhookReferralMessageMockRecorder) RefData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefData", reflect.TypeOf((*MockWebhookReferralMessage)(nil).RefData))
}

// Source mocks base method.
func (m *MockWebhookReferralMessage) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockWebhookReferralMessageMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockWebhookReferralMessage)(nil).Source))
}

// Type mocks base method.
func (m *MockWebhookReferralMessage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockWebhookReferralMessageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockWebhookReferralMessage)(nil).Type))
}
