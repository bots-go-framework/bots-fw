// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: InlineQuery)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput InlineQuery
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	botinput "github.com/bots-go-framework/bots-fw/botinput"
	gomock "go.uber.org/mock/gomock"
)

// MockInlineQuery is a mock of InlineQuery interface.
type MockInlineQuery struct {
	ctrl     *gomock.Controller
	recorder *MockInlineQueryMockRecorder
	isgomock struct{}
}

// MockInlineQueryMockRecorder is the mock recorder for MockInlineQuery.
type MockInlineQueryMockRecorder struct {
	mock *MockInlineQuery
}

// NewMockInlineQuery creates a new mock instance.
func NewMockInlineQuery(ctrl *gomock.Controller) *MockInlineQuery {
	mock := &MockInlineQuery{ctrl: ctrl}
	mock.recorder = &MockInlineQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInlineQuery) EXPECT() *MockInlineQueryMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockInlineQuery) GetFrom() botinput.Sender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(botinput.Sender)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockInlineQueryMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockInlineQuery)(nil).GetFrom))
}

// GetID mocks base method.
func (m *MockInlineQuery) GetID() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockInlineQueryMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockInlineQuery)(nil).GetID))
}

// GetInlineQueryID mocks base method.
func (m *MockInlineQuery) GetInlineQueryID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlineQueryID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInlineQueryID indicates an expected call of GetInlineQueryID.
func (mr *MockInlineQueryMockRecorder) GetInlineQueryID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlineQueryID", reflect.TypeOf((*MockInlineQuery)(nil).GetInlineQueryID))
}

// GetOffset mocks base method.
func (m *MockInlineQuery) GetOffset() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffset")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOffset indicates an expected call of GetOffset.
func (mr *MockInlineQueryMockRecorder) GetOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockInlineQuery)(nil).GetOffset))
}

// GetQuery mocks base method.
func (m *MockInlineQuery) GetQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockInlineQueryMockRecorder) GetQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockInlineQuery)(nil).GetQuery))
}
