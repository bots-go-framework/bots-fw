// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: SharedUsersMessage)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput SharedUsersMessage
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"
	time "time"

	botinput "github.com/bots-go-framework/bots-fw/botinput"
	gomock "go.uber.org/mock/gomock"
)

// MockSharedUsersMessage is a mock of SharedUsersMessage interface.
type MockSharedUsersMessage struct {
	ctrl     *gomock.Controller
	recorder *MockSharedUsersMessageMockRecorder
	isgomock struct{}
}

// MockSharedUsersMessageMockRecorder is the mock recorder for MockSharedUsersMessage.
type MockSharedUsersMessageMockRecorder struct {
	mock *MockSharedUsersMessage
}

// NewMockSharedUsersMessage creates a new mock instance.
func NewMockSharedUsersMessage(ctrl *gomock.Controller) *MockSharedUsersMessage {
	mock := &MockSharedUsersMessage{ctrl: ctrl}
	mock.recorder = &MockSharedUsersMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedUsersMessage) EXPECT() *MockSharedUsersMessageMockRecorder {
	return m.recorder
}

// BotChatID mocks base method.
func (m *MockSharedUsersMessage) BotChatID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotChatID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BotChatID indicates an expected call of BotChatID.
func (mr *MockSharedUsersMessageMockRecorder) BotChatID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotChatID", reflect.TypeOf((*MockSharedUsersMessage)(nil).BotChatID))
}

// Chat mocks base method.
func (m *MockSharedUsersMessage) Chat() botinput.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat")
	ret0, _ := ret[0].(botinput.Chat)
	return ret0
}

// Chat indicates an expected call of Chat.
func (mr *MockSharedUsersMessageMockRecorder) Chat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockSharedUsersMessage)(nil).Chat))
}

// GetRecipient mocks base method.
func (m *MockSharedUsersMessage) GetRecipient() botinput.Recipient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipient")
	ret0, _ := ret[0].(botinput.Recipient)
	return ret0
}

// GetRecipient indicates an expected call of GetRecipient.
func (mr *MockSharedUsersMessageMockRecorder) GetRecipient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipient", reflect.TypeOf((*MockSharedUsersMessage)(nil).GetRecipient))
}

// GetRequestID mocks base method.
func (m *MockSharedUsersMessage) GetRequestID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRequestID indicates an expected call of GetRequestID.
func (mr *MockSharedUsersMessageMockRecorder) GetRequestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestID", reflect.TypeOf((*MockSharedUsersMessage)(nil).GetRequestID))
}

// GetSender mocks base method.
func (m *MockSharedUsersMessage) GetSender() botinput.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSender")
	ret0, _ := ret[0].(botinput.User)
	return ret0
}

// GetSender indicates an expected call of GetSender.
func (mr *MockSharedUsersMessageMockRecorder) GetSender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSender", reflect.TypeOf((*MockSharedUsersMessage)(nil).GetSender))
}

// GetSharedUsers mocks base method.
func (m *MockSharedUsersMessage) GetSharedUsers() []botinput.SharedUserMessageItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedUsers")
	ret0, _ := ret[0].([]botinput.SharedUserMessageItem)
	return ret0
}

// GetSharedUsers indicates an expected call of GetSharedUsers.
func (mr *MockSharedUsersMessageMockRecorder) GetSharedUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedUsers", reflect.TypeOf((*MockSharedUsersMessage)(nil).GetSharedUsers))
}

// GetTime mocks base method.
func (m *MockSharedUsersMessage) GetTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockSharedUsersMessageMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockSharedUsersMessage)(nil).GetTime))
}

// InputType mocks base method.
func (m *MockSharedUsersMessage) InputType() botinput.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputType")
	ret0, _ := ret[0].(botinput.Type)
	return ret0
}

// InputType indicates an expected call of InputType.
func (mr *MockSharedUsersMessageMockRecorder) InputType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputType", reflect.TypeOf((*MockSharedUsersMessage)(nil).InputType))
}

// LogRequest mocks base method.
func (m *MockSharedUsersMessage) LogRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogRequest")
}

// LogRequest indicates an expected call of LogRequest.
func (mr *MockSharedUsersMessageMockRecorder) LogRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRequest", reflect.TypeOf((*MockSharedUsersMessage)(nil).LogRequest))
}

// MessageIntID mocks base method.
func (m *MockSharedUsersMessage) MessageIntID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageIntID")
	ret0, _ := ret[0].(int)
	return ret0
}

// MessageIntID indicates an expected call of MessageIntID.
func (mr *MockSharedUsersMessageMockRecorder) MessageIntID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageIntID", reflect.TypeOf((*MockSharedUsersMessage)(nil).MessageIntID))
}

// MessageStringID mocks base method.
func (m *MockSharedUsersMessage) MessageStringID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageStringID")
	ret0, _ := ret[0].(string)
	return ret0
}

// MessageStringID indicates an expected call of MessageStringID.
func (mr *MockSharedUsersMessageMockRecorder) MessageStringID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageStringID", reflect.TypeOf((*MockSharedUsersMessage)(nil).MessageStringID))
}
