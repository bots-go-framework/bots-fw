// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: WebhookSubscribed)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput WebhookSubscribed
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookSubscribed is a mock of WebhookSubscribed interface.
type MockWebhookSubscribed struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookSubscribedMockRecorder
	isgomock struct{}
}

// MockWebhookSubscribedMockRecorder is the mock recorder for MockWebhookSubscribed.
type MockWebhookSubscribedMockRecorder struct {
	mock *MockWebhookSubscribed
}

// NewMockWebhookSubscribed creates a new mock instance.
func NewMockWebhookSubscribed(ctrl *gomock.Controller) *MockWebhookSubscribed {
	mock := &MockWebhookSubscribed{ctrl: ctrl}
	mock.recorder = &MockWebhookSubscribedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookSubscribed) EXPECT() *MockWebhookSubscribedMockRecorder {
	return m.recorder
}

// SubscribedMessage mocks base method.
func (m *MockWebhookSubscribed) SubscribedMessage() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribedMessage")
	ret0, _ := ret[0].(any)
	return ret0
}

// SubscribedMessage indicates an expected call of SubscribedMessage.
func (mr *MockWebhookSubscribedMockRecorder) SubscribedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribedMessage", reflect.TypeOf((*MockWebhookSubscribed)(nil).SubscribedMessage))
}
