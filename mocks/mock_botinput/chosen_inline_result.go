// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: ChosenInlineResult)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput ChosenInlineResult
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	botinput "github.com/bots-go-framework/bots-fw/botinput"
	gomock "go.uber.org/mock/gomock"
)

// MockChosenInlineResult is a mock of ChosenInlineResult interface.
type MockChosenInlineResult struct {
	ctrl     *gomock.Controller
	recorder *MockChosenInlineResultMockRecorder
	isgomock struct{}
}

// MockChosenInlineResultMockRecorder is the mock recorder for MockChosenInlineResult.
type MockChosenInlineResultMockRecorder struct {
	mock *MockChosenInlineResult
}

// NewMockChosenInlineResult creates a new mock instance.
func NewMockChosenInlineResult(ctrl *gomock.Controller) *MockChosenInlineResult {
	mock := &MockChosenInlineResult{ctrl: ctrl}
	mock.recorder = &MockChosenInlineResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChosenInlineResult) EXPECT() *MockChosenInlineResultMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockChosenInlineResult) GetFrom() botinput.Sender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(botinput.Sender)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockChosenInlineResultMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockChosenInlineResult)(nil).GetFrom))
}

// GetInlineMessageID mocks base method.
func (m *MockChosenInlineResult) GetInlineMessageID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInlineMessageID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInlineMessageID indicates an expected call of GetInlineMessageID.
func (mr *MockChosenInlineResultMockRecorder) GetInlineMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlineMessageID", reflect.TypeOf((*MockChosenInlineResult)(nil).GetInlineMessageID))
}

// GetQuery mocks base method.
func (m *MockChosenInlineResult) GetQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockChosenInlineResultMockRecorder) GetQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockChosenInlineResult)(nil).GetQuery))
}

// GetResultID mocks base method.
func (m *MockChosenInlineResult) GetResultID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResultID indicates an expected call of GetResultID.
func (mr *MockChosenInlineResultMockRecorder) GetResultID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultID", reflect.TypeOf((*MockChosenInlineResult)(nil).GetResultID))
}
