// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: ContactMessage)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput ContactMessage
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContactMessage is a mock of ContactMessage interface.
type MockContactMessage struct {
	ctrl     *gomock.Controller
	recorder *MockContactMessageMockRecorder
	isgomock struct{}
}

// MockContactMessageMockRecorder is the mock recorder for MockContactMessage.
type MockContactMessageMockRecorder struct {
	mock *MockContactMessage
}

// NewMockContactMessage creates a new mock instance.
func NewMockContactMessage(ctrl *gomock.Controller) *MockContactMessage {
	mock := &MockContactMessage{ctrl: ctrl}
	mock.recorder = &MockContactMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactMessage) EXPECT() *MockContactMessageMockRecorder {
	return m.recorder
}

// GetBotUserID mocks base method.
func (m *MockContactMessage) GetBotUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBotUserID indicates an expected call of GetBotUserID.
func (mr *MockContactMessageMockRecorder) GetBotUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotUserID", reflect.TypeOf((*MockContactMessage)(nil).GetBotUserID))
}

// GetFirstName mocks base method.
func (m *MockContactMessage) GetFirstName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFirstName indicates an expected call of GetFirstName.
func (mr *MockContactMessageMockRecorder) GetFirstName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstName", reflect.TypeOf((*MockContactMessage)(nil).GetFirstName))
}

// GetLastName mocks base method.
func (m *MockContactMessage) GetLastName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLastName indicates an expected call of GetLastName.
func (mr *MockContactMessageMockRecorder) GetLastName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastName", reflect.TypeOf((*MockContactMessage)(nil).GetLastName))
}

// GetPhoneNumber mocks base method.
func (m *MockContactMessage) GetPhoneNumber() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumber")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPhoneNumber indicates an expected call of GetPhoneNumber.
func (mr *MockContactMessageMockRecorder) GetPhoneNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumber", reflect.TypeOf((*MockContactMessage)(nil).GetPhoneNumber))
}

// GetVCard mocks base method.
func (m *MockContactMessage) GetVCard() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVCard")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVCard indicates an expected call of GetVCard.
func (mr *MockContactMessageMockRecorder) GetVCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCard", reflect.TypeOf((*MockContactMessage)(nil).GetVCard))
}
