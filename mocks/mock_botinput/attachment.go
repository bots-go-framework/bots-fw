// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: Attachment)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput Attachment
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAttachment is a mock of Attachment interface.
type MockAttachment struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentMockRecorder
	isgomock struct{}
}

// MockAttachmentMockRecorder is the mock recorder for MockAttachment.
type MockAttachmentMockRecorder struct {
	mock *MockAttachment
}

// NewMockAttachment creates a new mock instance.
func NewMockAttachment(ctrl *gomock.Controller) *MockAttachment {
	mock := &MockAttachment{ctrl: ctrl}
	mock.recorder = &MockAttachmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachment) EXPECT() *MockAttachmentMockRecorder {
	return m.recorder
}

// PayloadUrl mocks base method.
func (m *MockAttachment) PayloadUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayloadUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// PayloadUrl indicates an expected call of PayloadUrl.
func (mr *MockAttachmentMockRecorder) PayloadUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayloadUrl", reflect.TypeOf((*MockAttachment)(nil).PayloadUrl))
}

// Type mocks base method.
func (m *MockAttachment) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockAttachmentMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockAttachment)(nil).Type))
}
