// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bots-go-framework/bots-fw/botinput (interfaces: WebhookAttachment)
//
// Generated by this command:
//
//	mockgen github.com/bots-go-framework/bots-fw/botinput WebhookAttachment
//

// Package mock_botinput is a generated GoMock package.
package mock_botinput

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookAttachment is a mock of WebhookAttachment interface.
type MockWebhookAttachment struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookAttachmentMockRecorder
	isgomock struct{}
}

// MockWebhookAttachmentMockRecorder is the mock recorder for MockWebhookAttachment.
type MockWebhookAttachmentMockRecorder struct {
	mock *MockWebhookAttachment
}

// NewMockWebhookAttachment creates a new mock instance.
func NewMockWebhookAttachment(ctrl *gomock.Controller) *MockWebhookAttachment {
	mock := &MockWebhookAttachment{ctrl: ctrl}
	mock.recorder = &MockWebhookAttachmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookAttachment) EXPECT() *MockWebhookAttachmentMockRecorder {
	return m.recorder
}

// PayloadUrl mocks base method.
func (m *MockWebhookAttachment) PayloadUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayloadUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// PayloadUrl indicates an expected call of PayloadUrl.
func (mr *MockWebhookAttachmentMockRecorder) PayloadUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayloadUrl", reflect.TypeOf((*MockWebhookAttachment)(nil).PayloadUrl))
}

// Type mocks base method.
func (m *MockWebhookAttachment) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockWebhookAttachmentMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockWebhookAttachment)(nil).Type))
}
